lat <- j$resourceSets[[1]]$resources[[1]]$point$coordinates[[1]]
lng <- j$resourceSets[[1]]$resources[[1]]$point$coordinates[[2]]
}
else {
lat <- lng <- NA
}
data<-c(lat,lng)
#data[3]<-"BING"BING <- function(str){
u <- URLencode(paste0("http://dev.virtualearth.net/REST/v1/Locations?q=", str, "&maxResults=1&key=Apo4HssxpmYvVbDEUA464pmX5Y30xsQNlJ4pES6Z6D056puS63D90MLZlQ1yVeTG"))
d <- getURL(u)
j <- RJSONIO::fromJSON(d,simplify = FALSE)
if (j$resourceSets[[1]]$estimatedTotal > 0) {
lat <- j$resourceSets[[1]]$resources[[1]]$point$coordinates[[1]]
lng <- j$resourceSets[[1]]$resources[[1]]$point$coordinates[[2]]
}
else {
lat <- lng <- NA
}
data<-c(lat,lng)
#data[3]<-"BING"
data[4]<- str
data2<-data.frame(address=c(data[4]), lat=c(data[1]), long=c(data[2]), geocoder=c(data[3]))
return(data2)
}
data[4]<- str
data2<-data.frame(address=c(data[4]), lat=c(data[1]), long=c(data[2]), geocoder=c(data[3]))
return(data2)
}
BING <- function(str){
u <- URLencode(paste0("http://dev.virtualearth.net/REST/v1/Locations?q=", str, "&maxResults=1&key=Apo4HssxpmYvVbDEUA464pmX5Y30xsQNlJ4pES6Z6D056puS63D90MLZlQ1yVeTG"))
d <- getURL(u)
j <- RJSONIO::fromJSON(d,simplify = FALSE)
if (j$resourceSets[[1]]$estimatedTotal > 0) {
lat <- j$resourceSets[[1]]$resources[[1]]$point$coordinates[[1]]
lng <- j$resourceSets[[1]]$resources[[1]]$point$coordinates[[2]]
}
else {
lat <- lng <- NA
}
data<-c(lat,lng)
#data[3]<-"BING"
data[4]<- str
data2<-data.frame(address=c(data[4]), lat=c(data[1]), long=c(data[2]), geocoder=c(data[3]))
return(data2)
}
data<-BING("299 lanark road west, edinburgh")
data
runApp()
is.null(data$address)
runApp()
runApp()
names(data)
dataorig<-c("address", "lat", "long","geocoder")
runApp()
runApp()
library(shiny)
ui <- fluidPage(
actionButton('btn1','button'),
dataTableOutput('table1')
)
server <- function(input,output){
my_df <- reactiveVal(cars[1:5,])
observeEvent(input$btn1,{
# call old value with my_df(), rbind the new row, and set the new value
# by wrapping the statement with my_df()
my_df(rbind(my_df(), c(1,2)))
})
output$table1 <- renderDataTable(
my_df())
}
shinyApp(ui,server)
library(shiny)
ui <- fluidPage(
actionButton('btn1','button'),
dataTableOutput('table1')
)
server <- function(input,output){
my_df <- reactiveVal(cars[1:5,])
observeEvent(input$btn1,{
# call old value with my_df(), rbind the new row, and set the new value
# by wrapping the statement with my_df()
my_df(rbind(my_df(), c(1,2)))
})
output$table1 <- renderDataTable(
my_df())
}
shinyApp(ui,server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dataorig<-as.data.frame(c(address=c(""), lat=c(""), long=c("")))
dataorig
dataorig<-as.data.frame(address=c(""), lat=c(""), long=c(""))
dataorig<-data.frame(address=c(""), lat=c(""), long=c(""))
dataorig
runApp()
runApp()
runApp()
data<-BING("Edinburgh")
data
BING <- function(str){
u <- URLencode(paste0("http://dev.virtualearth.net/REST/v1/Locations?q=", str, "&maxResults=1&key=Apo4HssxpmYvVbDEUA464pmX5Y30xsQNlJ4pES6Z6D056puS63D90MLZlQ1yVeTG"))
d <- getURL(u)
j <- RJSONIO::fromJSON(d,simplify = FALSE)
if (j$resourceSets[[1]]$estimatedTotal > 0) {
lat <- j$resourceSets[[1]]$resources[[1]]$point$coordinates[[1]]
lng <- j$resourceSets[[1]]$resources[[1]]$point$coordinates[[2]]
}
else {
lat <- lng <- NA
}
data<-c(lat,lng)
#data[3]<-"BING"
data[4]<- str
data2<-data.frame(address=c(data[4]), lat=c(data[1]), long=c(data[2]))
return(data2)
}
data<-BING("Edinburgh")
data
ataorig<-data.frame(address=c(""), lat=c(""), long=c(""),datefrom=c(""),
dateto=c(""))
dataorig<-data.frame(address=c(""), lat=c(""), long=c(""),datefrom=c(""),
dateto=c(""))
dataorig
data$dateto<-1/1/22
data$datefrom<-1/1/22
dta
data
dataorig
rbind(dataorig, data)
runApp()
runApp()
runApp()
dataorig<-data.frame(address=NA,
lat=NA,
long=NA,
datefrom=NA,
dateto=NA)
runApp()
runApp()
library(shiny)
library(tidyverse)
#ui.r
ui <- fluidPage(
# Application title
titlePanel("Test App"),
sidebarPanel(
numericInput("x", "Enter Value of X", 1),
numericInput("y", "Enter Value of Y", 1),
actionButton("add_data", "Add Data", width = "100%")
),
mainPanel(
tableOutput("xy_Table")
)
)
#server.R
server <- function(input, output) {
xyTable <- reactiveValues(
table1 = tibble(x = numeric(), y = numeric())
)
# what happens when `add_data` is clicked?
observeEvent(input$add_data, {
xyTable$table1 <- xyTable$table1 |>
add_row(x = input$x, y = input$y)
})
output$xy_Table <- renderTable({
xyTable$table1
})
}
shinyApp(ui, server)
library(shiny)
library(tidyverse)
ui <- fluidPage(
sidebarPanel(
numericInput("x", "Enter Value of X", 1),
numericInput("y", "Enter Value of Y", 1),
actionButton("add_data", "Add Data", width = "100%")
),
mainPanel(
tableOutput("xy_Table")
)
)
server <- function(input, output, session) {
xyTable <- reactiveVal(
tibble(x = numeric(), y = numeric())
)
observeEvent(input$add_data, {
xyTable() %>%
add_row(
x = input$x,
y = input$y,
) %>%
xyTable()
})
output$xy_Table <- renderTable(xyTable())
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
useShinyjs(),  # Include shinyjs
# Fonts
tags$style(type = "text/css", "#map {height: calc(100vh - 160px) !important;}"),
tags$head(
tags$style(HTML("
@import url('//fonts.googleapis.com/css?family=Roboto+Slab');
"))),
# Header panel
headerPanel(
)
a
ui <- fluidPage(
useShinyjs(),  # Include shinyjs
# Fonts
tags$style(type = "text/css", "#map {height: calc(100vh - 160px) !important;}"),
tags$head(
tags$style(HTML("
@import url('//fonts.googleapis.com/css?family=Roboto+Slab');
"))),
# Header panel
headerPanel(
)
)
runApp()
ui <- fluidPage(
useShinyjs(),  # Include shinyjs
# Fonts
tags$style(type = "text/css", "#map {height: calc(100vh - 160px) !important;}"),
tags$head(
tags$style(HTML("
@import url('//fonts.googleapis.com/css?family=Roboto+Slab');
"))),
# Header panel
headerPanel(
(0p
library(shiny)
library(tidyverse)
ui <- fluidPage(
useShinyjs(),  # Include shinyjs
# Fonts
tags$style(type = "text/css", "#map {height: calc(100vh - 160px) !important;}"),
tags$head(
tags$style(HTML("
@import url('//fonts.googleapis.com/css?family=Roboto+Slab');
"))),
# Header panel
headerPanel(
fluidRow(
column(11, h1("Lifeplaces",style = "font-family: 'Roboto Slab', cursive;font-weight: bold; font-size: 39px"))),
windowTitle = "Lifeplaces"),
sidebarPanel(
strong("Description"),))
helpText(""),
div(style="display:inline-block", textInput("str", label =("Enter a previous address"), value = "")),
dateInput("date3", "Date from:", value = Sys.Date(), format = "mm/dd/yy"),
dateInput("date4", "Date to:", value = Sys.Date(), format = "mm/dd/yy"),
div(style="display:inline-block", actionButton("goButton", "Enter"))),
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Table", tableOutput("table")),
tabPanel("Map", leafletOutput("map")))
)
)
server <- function(input, output, session) {
xyTable <- reactiveVal(
tibble(x = numeric(), y = numeric())
)
observeEvent(input$add_data, {
xyTable() %>%
add_row(
x = input$x,
y = input$y,
) %>%
xyTable()
})
output$xy_Table <- renderTable(xyTable())
}
shinyApp(ui, server)
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
BING <- function(str){
u <- URLencode(paste0("http://dev.virtualearth.net/REST/v1/Locations?q=", str, "&maxResults=1&key=Apo4HssxpmYvVbDEUA464pmX5Y30xsQNlJ4pES6Z6D056puS63D90MLZlQ1yVeTG"))
d <- getURL(u)
j <- RJSONIO::fromJSON(d,simplify = FALSE)
if (j$resourceSets[[1]]$estimatedTotal > 0) {
lat <- j$resourceSets[[1]]$resources[[1]]$point$coordinates[[1]]
lng <- j$resourceSets[[1]]$resources[[1]]$point$coordinates[[2]]
}
else {
lat <- lng <- NA
}
data<-c(lat,lng)
#data[3]<-"BING"
data[4]<- str
data2<-data.frame(address=c(data[4]), lat=c(data[1]), long=c(data[2]))
return(data2)
}
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
lat=55.66755
long=-0.323454
data.frame(
lat=as.numeric(c(lat)),
long=as.numeric(c(long)),
)
data.frame(
lat=as.numeric(lat),
long=as.numeric(long),
)
as.data.frame(
lat=as.numeric(c(lat)),
long=as.numeric(c(long)),
)
?data.frame
lat<-c(data[1])
long<-c(data[2])
DT = data.frame(
lat=as.numeric(),
long=as.numeric(c(data[2])),
)
DT = data.frame(
lat=as.numeric(lat),
long=as.numeric(long),
)
DT
DT = data.frame(
lat=as.numeric(lat),
long=as.numeric(long),
)
DT = data.frame(
lat=as.numeric(lat),
long=as.numeric(long)
)
DT
lat
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
?addMarkers
?addMarkers
runApp('test.R')
runApp('test.R')
lat=56.435
long=-1.2532
DT = data.frame(
lat=as.numeric(lat),
lng=as.numeric(long)
)
DT
DT = st_as_sf(DT, coords = c("lng","lat"), remove = FALSE)
DT
leaflet(DT) %>% add_marker()
leaflet(DT) %>% addMarkers()
?addPolygons
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
?addMarkers
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('app.R')
runApp('app.R')
runApp()
runApp()
BING <- function(str){
u <- URLencode(paste0("http://dev.virtualearth.net/REST/v1/Locations?q=", str, "&maxResults=1&key=Apo4HssxpmYvVbDEUA464pmX5Y30xsQNlJ4pES6Z6D056puS63D90MLZlQ1yVeTG"))
d <- getURL(u)
j <- RJSONIO::fromJSON(d,simplify = FALSE)
if (j$resourceSets[[1]]$estimatedTotal > 0) {
lat <- j$resourceSets[[1]]$resources[[1]]$point$coordinates[[1]]
lng <- j$resourceSets[[1]]$resources[[1]]$point$coordinates[[2]]
}
else {
lat <- lng <- NA
}
data<-c(lat,lng)
data
}
BING("edinburgh")
runApp()
runApp()
runApp()
?leafletProxy
runApp()
runApp()
?leafletProxy
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?st_as_sf
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?observeEvent
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?observeEvent
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
